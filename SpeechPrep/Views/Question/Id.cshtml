@model SpeechPrep.Models.Question
@{
    ViewBag.Title = "Random";
    Layout = "~/Views/Shared/_Layout.cshtml";
}





    <div class="container">
        <div class="row">
            <div class="col-12" >
                <h2 id="questionStyle"class="text-center">@Model.InterviewQuestion</h2>
                

            </div>
            <div class="col-12">
                <div id="webCamWrapper">
                    <video class=" " id="webCamVideo"></video>
                </div>
                <div class="text-center">
                    <button class="btn btn-outline-primary" onclick="responsiveVoice.speak('@Model.InterviewQuestion');" type="button" value="Play"> Ask Question </button>
                </div>

                @* Stopwatch *@
                <div id="timerContainer">
                    <div class="timer" onclick="startTimer()">Start Timer!</div>
                    <div class="startTimer reset" onclick="startTimer()">
                        Start
                    </div>
                    <div class="pauseTimer reset" onclick="pauseTimer()">
                        Pause
                    </div>
                    <div class="resetTimer reset" onclick="resetTimer()">Reset</div>
                </div>
                <script type="text/javascript" src="~/Scripts/stopWatch.js"></script>
                @* End Stopwatch *@
                <div class="response">
                    <p>Tests</p>

                </div>
            </div>
        </div>
        
    </div>
    <script>
        'use strict'
        //Video and Audio settings
        const contraints = {
            audio: true,
            video: {
                facingMode: "user",
                width: { min: 1024, ideal: 1280, max: 1920 },
                height: { min: 776, ideal: 720, max: 1080 }
            }
        };
        if (navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia({ audio: true, video: true, width: 300 })
                .then((stream) => {
                    const video = document.getElementById('webCamVideo');
                    window.stream = stream;
                    video.srcObject = stream;
                    video.onloadedmetadata = function (e) {
                        video.play();
                    };
                })
                .catch((e) => {
                    console.log(" And you broke yet again. Take a look at this : ");
                    console.log(e);
                });
        }


        //Native Speech Recognition for Questions
        // TODO: Link to button start press on question Id page
        //Create header for div containig response class to seperate it from rest of the document.
        window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

        const recognition = new SpeechRecognition();
        recognition.interimResults = true;

        let p = document.createElement('p');
        const speech = document.querySelector('.response');
        speech.appendChild(p);

        recognition.addEventListener('result', e => {
            const transcript = Array.from(e.results)
                .map(result => result[0])
                .map(result => result.transcript)
                .join('')

            p.textContent = transcript;

            if (e.results[0].isFinal) {
                p = document.createElement('p');
                speech.appendChild(p);
            }
            console.log(transcript);
        })
        recognition.addEventListener('end', recognition.start);
        recognition.start();
        /*
         * To find stutter words use ->
         * 
         * if (transcript.includes('so')){
         *  do something
         * }
         * /
    </script>